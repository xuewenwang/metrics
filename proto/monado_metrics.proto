syntax = "proto3";

package monado_metrics;


message SessionFrame
{
	//! Which session this frame belongs to.
	int64 session_id = 1;

	//! ID of frame.
	int64 frame_id = 2;

	//! When we predicted this frame to be shown.
	uint64 predicted_display_time_ns = 3;

	//! The selected display period.
	uint64 predicted_display_period_ns = 4;

	//! When the client's GPU work should have completed.
	uint64 predicted_gpu_done_time_ns = 5;

	/*!
	 * When the app told us to display this frame, can be different
	 * then the predicted display time so we track that separately.
	 */
	uint64 display_time_ns = 6;

	//! When the predict call was made (inside of xrWaitFrame).
	uint64 when_predicted_ns = 7;

	//! When the waiting thread was woken up.
	uint64 when_wait_woke_ns = 8;

	//! When xrBeginFrame was called.
	uint64 when_begin_ns = 9;

	//! When the layer information was delivered, (inside of xrEndFrame).
	uint64 when_delivered_ns = 10;

	//! When the scheduled GPU work was completed.
	uint64 when_gpu_done_ns = 11;

	//! Was this frame discared.
	bool discarded = 12;
}

message SystemFrame
{
	//! ID of frame.
	int64 frame_id = 1;

	//! Projected pixels to photon time.
	uint64 predicted_display_time_ns = 2;

	//! Current period of displying of frames.
	uint64 predicted_display_period_ns = 3;

	//! When the compositor should hand pixels to display hardware.
	uint64 desired_present_time_ns = 4;

	//! The time that the compositor should wake up.
	uint64 wake_up_time_ns = 5;
	uint64 present_slop_ns = 6;
}

/*!
 * Out of band info about a GPU timing from a system compositor.
 * Only generated by the fake compositor pacer.
 */
message SystemGpuInfo
{
	//! ID of frame.
	int64 frame_id = 1;

	//! Start of GPU work.
	uint64 start_gpu_ns = 2;

	//! End of GPU work.
	uint64 end_gpu_ns = 3;
}

message Used
{
	//! Owning session of the frame.
	int64 session_id = 1;

	//! Which session frame was used by the compositor.
	int64 session_frame_id = 2;

	//! The system frame that the session was used by.
	int64 system_frame_id = 3;

	//! When the frame was latched.
	uint64 when_ns = 4;
}

message Record
{
	oneof record {
		SessionFrame session_frame = 1;
		SystemFrame system_frame = 2;
		Used used = 3;
	};
}
